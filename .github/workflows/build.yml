name: Build And Test

on:
  pull_request:
    branches:
      - develop
      - "feat/*"
      - "feat-*"
  merge_group:
    types: [ checks_requested ]
    branches:
      - develop
      - "feat/*"
      - "feat-*"

jobs:
  run-workflow:
    name: PR Workflow
    if: github.repository_owner == 'aws'
    runs-on: ubuntu-latest
    needs:
      - make-pr
      - integration-tests
      - smoke-and-functional-tests
    steps:
      - name: report-failure
        if : |
          needs.make-pr.result != 'success' ||
          needs.integration-tests.result != 'success' ||
          needs.smoke-and-functional-tests.result != 'success'
        run: exit 1
      - name: report-success
        run: exit 0

  make-pr:
    name: make pr / ${{ matrix.os }} / ${{ matrix.python }}
    if: github.repository_owner == 'aws'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          # TODO: Add macos-latest; fails currently, see e.g. https://github.com/aws/aws-sam-cli/actions/runs/3596883449/jobs/6058055981
          - ubuntu-latest
          - windows-latest
        python:
          - "3.7"
          - "3.8"
          - "3.9"
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - run: test -f "./.github/ISSUE_TEMPLATE/Bug_report.md"  # prevent Bug_report.md from being renamed or deleted
    - run: make init
    - run: make pr

  get-integration-test-folders:
    name: List test folders in tests/integration folder which can be used by integration-tests job
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.list_test_folders.outputs.folders }}
    steps:
      - uses: actions/checkout@v3
      - id: list_test_folders
        run: echo "folders=$(find tests/integration -type d -maxdepth 1 -not -path tests/integration -not -path tests/integration/testdata | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  integration-tests:
    needs: get-integration-test-folders
    name: Integration Tests / ${{ matrix.os }} / ${{ matrix.python }} / ${{ matrix.test_folder }}
    if: github.repository_owner == 'aws'
    runs-on: ${{ matrix.os }}
    env:
      AWS_DEFAULT_REGION: us-east-1
      SAM_CLI_DEV: "1"
      CARGO_LAMBDA_VERSION: 0.17.1
      CI: true
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python:
          - "3.7"
          - "3.8"
          - "3.9"
        test_folder: ${{ fromJSON(needs.get-integration-test-folders.outputs.folders) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          # set last version as the one in matrix to make it default
          python-version: |
            3.7
            3.8
            3.9
            3.10
            ${{ matrix.python }}
      - uses: actions/setup-go@v4
        if: contains(matrix.test_folder, 'buildcmd')
        with:
          go-version: '1.19'
      - uses: ruby/setup-ruby@v1
        if: contains(matrix.test_folder, 'buildcmd')
        with:
          ruby-version: "2.7"
      - uses: actions/setup-node@v3
        if: contains(matrix.test_folder, 'buildcmd')
        with:
          node-version: 18
      - uses: actions/setup-java@v3
        if: contains(matrix.test_folder, 'buildcmd')
        with:
          distribution: 'corretto'
          java-version: '11'
       # Install and configure Rust
      - name: Install rustup
        if: ${{ contains(matrix.test_folder, 'buildcmd') && matrix.os == 'ubuntu-latest' }}
        run: |
          : install rustup if needed
          if ! command -v rustup &> /dev/null ; then
            curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
            echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH
          fi
          rustup toolchain install stable --profile minimal --no-self-update
          : disable incremental compilation
          echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
          : enable colors in Cargo output
          echo CARGO_TERM_COLOR=always >> $GITHUB_ENV
          pip install cargo-lambda==$CARGO_LAMBDA_VERSION
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Init samdev
        run: make init
      - name: Run integration tests for ${{ matrix.test_folder }}
        run: pytest -vv ${{ matrix.test_folder }}

  smoke-and-functional-tests:
    name: Functional & Smoke Tests / ${{ matrix.os }} / ${{ matrix.python }}
    if: github.repository_owner == 'aws'
    runs-on: ${{ matrix.os }}
    env:
      AWS_DEFAULT_REGION: us-east-1
      SAM_CLI_DEV: "1"
      CARGO_LAMBDA_VERSION: 0.17.1
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python:
          - "3.7"
          - "3.8"
          - "3.9"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Init samdev
        run: make init
      - name: Run functional & smoke tests
        run: pytest -vv -n 4 tests/functional tests/smoke
